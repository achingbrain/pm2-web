// MIT License:
//
// Copyright (c) 2010-2012, Joe Walnes
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
(function(b,a){if(typeof define==="function"&&define.amd){define([],a)}else{if(typeof module!=="undefined"&&module.exports){module.exports=a()}else{b.ReconnectingWebSocket=a()}}})(this,function(){function a(b,i,l){var e={debug:false,automaticOpen:true,reconnectInterval:1000,maxReconnectInterval:30000,reconnectDecay:1.5,timeoutInterval:2000};if(!l){l={}}for(var j in e){if(typeof l[j]!=="undefined"){this[j]=l[j]}else{this[j]=e[j]}}this.url=b;this.reconnectAttempts=0;this.readyState=WebSocket.CONNECTING;this.protocol=null;var k=this;var g;var f=false;var c=false;var h=document.createElement("div");h.addEventListener("open",function(m){k.onopen(m)});h.addEventListener("close",function(m){k.onclose(m)});h.addEventListener("connecting",function(m){k.onconnecting(m)});h.addEventListener("message",function(m){k.onmessage(m)});h.addEventListener("error",function(m){k.onerror(m)});this.addEventListener=h.addEventListener.bind(h);this.removeEventListener=h.removeEventListener.bind(h);this.dispatchEvent=h.dispatchEvent.bind(h);function d(o,n){var m=document.createEvent("CustomEvent");m.initCustomEvent(o,false,false,n);return m}this.open=function(m){g=new WebSocket(k.url,i||[]);if(!m){h.dispatchEvent(d("connecting"))}if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","attempt-connect",k.url)}var n=g;var o=setTimeout(function(){if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","connection-timeout",k.url)}c=true;n.close();c=false},k.timeoutInterval);g.onopen=function(p){clearTimeout(o);if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","onopen",k.url)}k.protocol=g.protocol;k.readyState=WebSocket.OPEN;k.reconnectAttempts=0;var q=d("open");q.isReconnect=m;m=false;h.dispatchEvent(q)};g.onclose=function(p){clearTimeout(q);g=null;if(f){k.readyState=WebSocket.CLOSED;h.dispatchEvent(d("close"))}else{k.readyState=WebSocket.CONNECTING;var r=d("connecting");r.code=p.code;r.reason=p.reason;r.wasClean=p.wasClean;h.dispatchEvent(r);if(!m&&!c){if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","onclose",k.url)}h.dispatchEvent(d("close"))}var q=k.reconnectInterval*Math.pow(k.reconnectDecay,k.reconnectAttempts);setTimeout(function(){k.reconnectAttempts++;k.open(true)},q>k.maxReconnectInterval?k.maxReconnectInterval:q)}};g.onmessage=function(p){if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","onmessage",k.url,p.data)}var q=d("message");q.data=p.data;h.dispatchEvent(q)};g.onerror=function(p){if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","onerror",k.url,p)}h.dispatchEvent(d("error"))}};if(this.automaticOpen==true){this.open(false)}this.send=function(m){if(g){if(k.debug||a.debugAll){console.debug("ReconnectingWebSocket","send",k.url,m)}return g.send(m)}else{throw"INVALID_STATE_ERR : Pausing to reconnect websocket"}};this.close=function(m,n){if(typeof m=="undefined"){m=1000}f=true;if(g){g.close(m,n)}};this.refresh=function(){if(g){g.close()}}}a.prototype.onopen=function(b){};a.prototype.onclose=function(b){};a.prototype.onconnecting=function(b){};a.prototype.onmessage=function(b){};a.prototype.onerror=function(b){};a.debugAll=false;a.CONNECTING=WebSocket.CONNECTING;a.OPEN=WebSocket.OPEN;a.CLOSING=WebSocket.CLOSING;a.CLOSED=WebSocket.CLOSED;return a});